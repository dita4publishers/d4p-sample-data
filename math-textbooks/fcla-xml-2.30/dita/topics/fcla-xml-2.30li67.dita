<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "urn:pubid:dita4publishers.org:doctypes:dita:topic" "topic.dtd">
<topic id="d1e30"><title>Section SAGE  SAGE: Open Source Mathematics Software</title><body><p> From <xref href="http://linear.ups.edu/" scope="external" format="html"><ph outputclass="cmti-12">A First Course in Linear Algebra</ph></xref><br/>Version 2.30<br/><ph outputclass="cmsy-10x-x-120">©</ph> 2004.<br/>Licensed under the <xref href="http://www.gnu.org/licenses/fdl.html" scope="external" format="html">GNU Free Documentation License</xref>.<br/><xref href="http://linear.ups.edu/" scope="external" format="html"><ph outputclass="cmtt-12">http://linear.ups.edu/</ph></xref><br/><br/> 
</p></body><topic id="d1e62"><title>Computation Note R.SAGE: Rings</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/CanfieldSteve">Steve Canfield</xref> <br/>SAGE uses different rings to denote the type of an object. The rings are as
follows:<br/>
                                                                          

                                                                          
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mtext> ZZ: The set of integers</m:mtext><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mtext> QQ: The set of rational numbers</m:mtext><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mtext> RR: The real numbers</m:mtext><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mtext> CC: The complex numbers</m:mtext><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>Most objects in SAGE will tell you which they are using with the  <ph outputclass="cmtt-12">base</ph><ph outputclass="cmtt-12">_ring()</ph>
command. Keep this in mind, especially when row reducing or factoring. Here’s a
quick example of where you might go wrong.
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>m</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>3</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>4</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>m</m:mi><m:mo class="MathClass-punc">.</m:mo><m:mi>b</m:mi><m:mi>a</m:mi><m:mi>s</m:mi><m:mi>e</m:mi><m:mtext> _</m:mtext><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>n</m:mi><m:mi>g</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow/><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>I</m:mi><m:mi>n</m:mi><m:mi>t</m:mi><m:mi>e</m:mi><m:mi>g</m:mi><m:mi>e</m:mi><m:mi>r</m:mi><m:mi>R</m:mi><m:mi>i</m:mi><m:mi>n</m:mi><m:mi>g</m:mi><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>m</m:mi><m:mo class="MathClass-punc">.</m:mo><m:mi>e</m:mi><m:mi>c</m:mi><m:mi>h</m:mi><m:mi>e</m:mi><m:mi>l</m:mi><m:mi>o</m:mi><m:mi>n</m:mi><m:mtext> _</m:mtext><m:mi>f</m:mi><m:mi>o</m:mi><m:mi>r</m:mi><m:mi>m</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow/><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mfenced separators="" open="[" close="]"><m:mrow><m:mtable style="text-align:axis;" equalrows="false" columnlines="none none none none none none none none none none none" equalcolumns="false" class="array"><m:mtr><m:mtd class="array" columnalign="center"><m:mn>2</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:mfenced><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr></m:mtable></m:math></mathml></equation-block><p>As you can clearly see,  <ph outputclass="cmtt-12">m </ph>isn’t even in reduced row-echelon form. This is because
<ph outputclass="cmtt-12">m </ph>is defined over the ZZ. You have to create matrices with the correct ring or you
will get this type of odd result. This problem comes up in more places than just
calculating the reduced row-echelon form, so unless you are specifically working
with integers take note.
                                                                          

                                                                          
</p></body></topic><topic id="d1e356"><title>Computation Note ME.SAGE: Matrix Entry</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/CanfieldSteve">Steve Canfield</xref> <br/>A matrix in <ph outputclass="cmsl-12">SAGE </ph>can be made a few ways. The first is simply
to define the matrix as an array of rows. <ph outputclass="cmsl-12">SAGE </ph>uses brackets
(<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mfenced separators="" open="[" close=""><m:mrow/></m:mfenced></m:math></mathml></d4p_eqn_inline> , <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mfenced separators="" open="" close="]"><m:mrow/></m:mfenced></m:math></mathml></d4p_eqn_inline>)
to delimit arrays. So the input
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"><m:mi>a</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>5</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>6</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>8</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>9</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mtd><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>would create a <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mn>3</m:mn><m:mo class="MathClass-bin">×</m:mo><m:mn>4</m:mn></m:math></mathml></d4p_eqn_inline>
matrix named  <ph outputclass="cmtt-12">a </ph>that is equal to </p><table><tgroup cols="1"><tbody><row><entry>
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mfenced separators="" open="[" close="]"><m:mrow><m:mtable style="text-align:axis;" equalrows="false" columnlines="none none none none none none none none none none none" equalcolumns="false" class="array"><m:mtr><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>2</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>3</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>4</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>5</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>6</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>7</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>8</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>9</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn><m:mn>2</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:mfenced></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   <ph outputclass="cmsl-12">SAGE </ph>will guess what type of matrix you are working with based on the inputs. If all
the entries are integers, you will get back an integer matrix. If your matrix contains an
entry in the <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:msup><m:mrow><m:mi>ℝ</m:mi></m:mrow><m:mrow/></m:msup></m:math></mathml></d4p_eqn_inline>
or <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>ℂ</m:mi></m:math></mathml></d4p_eqn_inline>space,
the matrix will be of those types. This can cause problems as integers cannot
become fractions, which is an issue when calculating reduced row-echelon form.
We therefore recommend using the following construction to make your matrices,
</p><table><tgroup cols="1"><tbody><row><entry>
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mi>a</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mi>Q</m:mi><m:mi>Q</m:mi><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>5</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>6</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>8</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>9</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   This gives you a matrix over the rational numbers which will be sufficient for
most of the course. If your matrix has entries that are complex numbers you
would replace the  <ph outputclass="cmtt-12">QQ </ph>with  <ph outputclass="cmtt-12">CC </ph>.<br/>To display a matrix named  <ph outputclass="cmtt-12">a </ph>, type  <ph outputclass="cmtt-12">a </ph>, and the output will be displayed with
rows and columns. If you type  <ph outputclass="cmtt-12">latex(a) </ph>you will get <ph outputclass="LATEX">L<ph outputclass="A">A</ph><ph outputclass="TEX">T<ph outputclass="E">E</ph>X</ph></ph> code to display
the matrix. Very handy.
</p></body></topic><topic id="d1e729"><title>Computation Note RR.SAGE: Row Reduce</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/CanfieldSteve">Steve Canfield</xref> and <xref keyref="fcla-xml-2.30li6/BeezerRobert">Robert Beezer</xref> <br/>Row-reducing a matrix is a simple operation in SAGE. However, because of Sage’s
flexibility with different types of numbers (integers, rationals, reals, complexes),
we need to be a bit more careful.
</p><p>   If  <ph outputclass="cmtt-12">a </ph>is a matrix entered in in SAGE (see <xref href="#computation.ME.SAGE">Computation ME.SAGE</xref>) then
<ph outputclass="cmtt-12">a.echelon</ph><ph outputclass="cmtt-12">_form() </ph>will return a new matrix that is the reduced row-echelon form
of  <ph outputclass="cmtt-12">a </ph>(<xref keyref="fcla-xml-2.30li18/definition.RREF">Definition RREF</xref>).
                                                                          

                                                                          
</p><p>   If your matrix has only integer entries (as is the case with many examples and
exercises in this book), then row operations might introduce rational
numbers (“fractions”). So when you enter your matrix, you need to tell
SAGE that rational numbers are allowable in its calculations. This is the
advice in <xref href="#computation.R.SAGE">Computation R.SAGE</xref> to use the ring  <ph outputclass="cmtt-12">QQ </ph>. As an illustration
create
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"><m:mi>a</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mi>Q</m:mi><m:mi>Q</m:mi><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>5</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>6</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>8</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>9</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mtd><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>and issue the command  <ph outputclass="cmtt-12">a.echelon</ph><ph outputclass="cmtt-12">_form() </ph>. The result is
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"><m:mfenced separators="" open="[" close="]"><m:mrow><m:mtable style="text-align:axis;" equalrows="false" columnlines="none none none none none none none none none none none" equalcolumns="false" class="array"><m:mtr><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mo class="MathClass-bin">−</m:mo><m:mn>2</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>2</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>3</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:mfenced></m:mtd><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>However, if we adjust the entry by neglecting to specify  <ph outputclass="cmtt-12">QQ </ph>, then SAGE assumes
that we only want to work with integers, since every entry of the matrix is an
integer. So as an experiment, enter
                                                                          

                                                                          
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"><m:mi>b</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>5</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>6</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>8</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>9</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mtd><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>and issue the command  <ph outputclass="cmtt-12">b.echelon</ph><ph outputclass="cmtt-12">_form() </ph>. The result is
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"><m:mfenced separators="" open="[" close="]"><m:mrow><m:mtable style="text-align:axis;" equalrows="false" columnlines="none none none none none none none none none none none" equalcolumns="false" class="array"><m:mtr><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>2</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>3</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>4</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>4</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>8</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>1</m:mn><m:mn>2</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd><m:mtd class="array" columnalign="center"><m:mn>0</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:mfenced></m:mtd><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>You can now clearly see Sage’s reluctance to multiply row 2 by
<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mfrac><m:mrow><m:mn>1</m:mn></m:mrow><m:mrow><m:mn>4</m:mn></m:mrow></m:mfrac></m:math></mathml></d4p_eqn_inline>.
</p><p>   The ring  <ph outputclass="cmtt-12">QQ </ph>will of course suffice if your matrix has rational numbers for entries.
Decimal entries are another place to be careful. If an entry of your matrix is the real number
<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mn>2</m:mn><m:mo class="MathClass-punc">.</m:mo><m:mn>1</m:mn><m:mn>7</m:mn></m:math></mathml></d4p_eqn_inline>, you are free to enter it
as the rational number <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mfrac><m:mrow><m:mn>2</m:mn><m:mn>1</m:mn><m:mn>7</m:mn></m:mrow><m:mrow><m:mn>1</m:mn><m:mn>0</m:mn><m:mn>0</m:mn></m:mrow></m:mfrac></m:math></mathml></d4p_eqn_inline>
and keep the ring  <ph outputclass="cmtt-12">QQ </ph>in the specification of your matrix. If you want to consider
your entries as real numbers, then you might as well just specify your ring as the
complex numbers  <ph outputclass="cmtt-12">CC </ph>. This advice also applies if you have complex numbers as
entries.
                                                                          

                                                                          
</p><p>   If you allow SAGE to work with real or complex numbers, then the
problem of round-off error becomes relevant. Computer arithmetic
with real numbers is, of necessity, subject to minor inaccuracies and
errors. This becomes problematic when row-reducing a matrix. If a
zero entry is computed instead as an extremely small number, such as
<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mn>1</m:mn><m:mo class="MathClass-punc">.</m:mo><m:mn>2</m:mn><m:mn>8</m:mn><m:mn>7</m:mn><m:mo class="MathClass-bin">×</m:mo><m:mn>1</m:mn><m:msup><m:mrow><m:mn>0</m:mn></m:mrow><m:mrow><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn><m:mn>8</m:mn></m:mrow></m:msup></m:math></mathml></d4p_eqn_inline>, then
an incorrect sequence of row operations will follow (with further incorrect
results). So if you use  <ph outputclass="cmtt-12">CC </ph>be on the lookout for these kinds of potential
pitfalls.
</p><p>   So, in summary, remember to always specify the ring you will be using for your
matrices, and most matrices can be handled with a choice of  <ph outputclass="cmtt-12">QQ </ph>or  <ph outputclass="cmtt-12">CC</ph>
.
</p><p>   When you need to do significant scientific computing with SAGE, there are
extra facilities that will help you work with these subtleties.
</p><p>   Finally, you can also use a command of the form  <ph outputclass="cmtt-12">a.echelonize() </ph>to replace
<ph outputclass="cmtt-12">a </ph>with its reduced row-echelon form.
</p></body></topic><topic id="d1e1246"><title>Computation Note LS.SAGE: Linear Solve</title><body><p>   <ph outputclass="cmsl-12">SAGE </ph>can solve a variety of systems of equations with the  <ph outputclass="cmtt-12">solve( )</ph>
command, even when the equations are not linear (see <xref keyref="fcla-xml-2.30li17/exercise.SSLE.M70">Exercise SSLE.M70</xref>). But
we can afford to specialize here to just linear systems. First, you must
specify your variables in advance, so for example,  <ph outputclass="cmtt-12">var(’x1,x2,x3’)</ph>
might precede a system with three equations. Equations are then written
just as you might expect, except that equality is written as  <ph outputclass="cmtt-12">== </ph>, since
computer programs have traditionally reserved  <ph outputclass="cmtt-12">= </ph>to assign values to
variables. And remember to use a  <ph outputclass="cmtt-12">* </ph>to indicate that a coefficient multiplies a
variable.
</p><p>   The example below illustrates the use of the command and the possibilities for
results. Each system would be preceded by establishing the variables with the
command  <ph outputclass="cmtt-12">var(’x,y’) </ph>. In the case of an infinite solution set, free variables are
denoted as  <ph outputclass="cmtt-12">rx </ph>where  <ph outputclass="cmtt-12">x </ph>is an integer that increases throughout a session. The
style of this description of a solution set is reminiscent of the style we used in
<xref keyref="fcla-xml-2.30li15/chapter.SLE">Chapter SLE</xref> before we were accustomed to using linear combinations of vectors
(<xref keyref="fcla-xml-2.30li24/theorem.VFSLS">Theorem VFSLS</xref>). </p><p>Notice how the output contains equations written a format that might be suitable as
input for further use within <ph outputclass="cmsl-12">SAGE</ph>.
</p></body></topic><topic id="d1e1361"><title>Computation Note VLC.SAGE: Vector Linear Combinations</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/BeezerRobert">Robert Beezer</xref> <br/>Vectors in <ph outputclass="cmsl-12">SAGE </ph>are constructed from lists, and are displayed horizontally. For
example, the vector </p><table><tgroup cols="1"><tbody><row><entry>
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mi>v</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mfenced separators="" open="[" close="]"><m:mrow><m:mtable style="text-align:axis;" equalrows="false" columnlines="none none none none none none none none none none none" equalcolumns="false" class="array"><m:mtr><m:mtd class="array" columnalign="center"><m:mn>1</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>2</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>3</m:mn></m:mtd></m:mtr><m:mtr><m:mtd class="array" columnalign="center"><m:mn>4</m:mn></m:mtd></m:mtr></m:mtable></m:mrow></m:mfenced></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   would be entered and named via the command </p><table><tgroup cols="1"><tbody><row><entry>
                                                                          

                                                                          
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mi>v</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>v</m:mi><m:mi>e</m:mi><m:mi>c</m:mi><m:mi>t</m:mi><m:mi>o</m:mi><m:mi>r</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mi>Q</m:mi><m:mi>Q</m:mi><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mspace width="0.3em" class="thinspace"/><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mspace width="0.3em" class="thinspace"/><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mspace width="0.3em" class="thinspace"/><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   See the notes about rings (<xref href="#computation.R.SAGE">Computation R.SAGE</xref>) and matrix entry
(<xref href="#computation.ME.SAGE">Computation ME.SAGE</xref>) for reminders about specifying the relevant
ring.
</p><p>   Vector addition and scalar multiplication are then very natural. If  <ph outputclass="cmtt-12">u </ph>and  <ph outputclass="cmtt-12">v</ph>
are two vectors of the same size, then </p><table><tgroup cols="1"><tbody><row><entry>
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mn>2</m:mn><m:mo class="MathClass-bin">∗</m:mo><m:mi>u</m:mi><m:mo class="MathClass-bin">+</m:mo><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mo class="MathClass-bin">−</m:mo><m:mn>3</m:mn></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mo class="MathClass-bin">∗</m:mo><m:mi>v</m:mi></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   will compute the correct vector. The result can be assigned to a variable
(which will then contain a vector), or be printed. If printed, it will be written
horizontally with parentheses for grouping. If  <ph outputclass="cmtt-12">u </ph>and  <ph outputclass="cmtt-12">v </ph>have different sizes, then
<ph outputclass="cmsl-12">SAGE </ph>will complain about “unsupported operand(s).”
</p></body></topic><topic id="d1e1533"><title>Computation Note MI.SAGE: Matrix Inverse</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/CanfieldSteve">Steve Canfield</xref> <br/>If <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>a</m:mi></m:math></mathml></d4p_eqn_inline> is a
matrix defined in <ph outputclass="cmsl-12">SAGE</ph>, then  <ph outputclass="cmtt-12">a.inverse() </ph>will return the inverse of
<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>a</m:mi></m:math></mathml></d4p_eqn_inline>, should it exist.
In the case where <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>a</m:mi></m:math></mathml></d4p_eqn_inline>
does not have an inverse <ph outputclass="cmsl-12">SAGE </ph>will tell you the matrix must be nonsingular (see
<xref keyref="fcla-xml-2.30li33/theorem.NI">Theorem NI</xref>).
                                                                          

                                                                          
</p></body></topic><topic id="d1e1580"><title>Computation Note TM.SAGE: Transpose of a Matrix</title><body><p>  Suppose  <ph outputclass="cmtt-12">a </ph>is the name of a matrix stored in <ph outputclass="cmsl-12">SAGE</ph>. Then  <ph outputclass="cmtt-12">a.transpose()</ph>
will return the transpose of  <ph outputclass="cmtt-12">a </ph>.
</p></body></topic><topic id="d1e1606"><title>Computation Note E.SAGE: Eigenspaces</title><body><p>   Contributed by <xref keyref="fcla-xml-2.30li6/CanfieldSteve">Steve Canfield</xref> <br/>SAGE can compute eigenspaces and eigenvalues for you. If you have a matrix
named  <ph outputclass="cmtt-12">a </ph>and you type </p><table><tgroup cols="1"><tbody><row><entry>
<equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" class="equation" overflow="scroll"><m:mi>a</m:mi><m:mo class="MathClass-punc">.</m:mo><m:mi>e</m:mi><m:mi>i</m:mi><m:mi>g</m:mi><m:mi>e</m:mi><m:mi>n</m:mi><m:mi>s</m:mi><m:mi>p</m:mi><m:mi>a</m:mi><m:mi>c</m:mi><m:mi>e</m:mi><m:mi>s</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow/><m:mo class="MathClass-close">)</m:mo></m:mrow></m:math></mathml></equation-block></entry></row></tbody></tgroup></table><p>   you will get a listing of the eigenvalues and the eigenspace for each. Let’s do
an example. Your output may be formatted slightly different from what we have
here.
                                                                          

                                                                          
</p><equation-block><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="block" overflow="scroll"><m:mtable columnalign="left" class="align-star"><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>m</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mi>m</m:mi><m:mi>a</m:mi><m:mi>t</m:mi><m:mi>r</m:mi><m:mi>i</m:mi><m:mi>x</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mi>Q</m:mi><m:mi>Q</m:mi><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mo class="MathClass-bin">−</m:mo><m:mn>8</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mo class="MathClass-bin">−</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>1</m:mn><m:mn>2</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>4</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mn>2</m:mn><m:mn>4</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mn>6</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>7</m:mn></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mi>m</m:mi><m:mo class="MathClass-punc">.</m:mo><m:mi>e</m:mi><m:mi>i</m:mi><m:mi>g</m:mi><m:mi>e</m:mi><m:mi>n</m:mi><m:mi>s</m:mi><m:mi>p</m:mi><m:mi>a</m:mi><m:mi>c</m:mi><m:mi>e</m:mi><m:mi>s</m:mi><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow/><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>2</m:mn><m:mo class="MathClass-bin">∕</m:mo><m:mn>3</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mo class="MathClass-bin">∕</m:mo><m:mn>3</m:mn></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">[</m:mo><m:mrow><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mo class="MathClass-bin">∕</m:mo><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow><m:mo class="MathClass-punc">,</m:mo><m:mrow><m:mo class="MathClass-open">(</m:mo><m:mrow><m:mn>0</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mn>1</m:mn><m:mo class="MathClass-punc">,</m:mo><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn><m:mo class="MathClass-bin">∕</m:mo><m:mn>2</m:mn></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">)</m:mo></m:mrow></m:mrow><m:mo class="MathClass-close">]</m:mo></m:mrow><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/><m:mtd class="align-label"><m:mspace width="2em"/></m:mtd></m:mtr><m:mtr><m:mtd columnalign="right" class="align-odd"/><m:mtd class="align-even"><m:mspace width="2em"/></m:mtd><m:mtd columnalign="right" class="align-label"/></m:mtr></m:mtable></m:math></mathml></equation-block><p>Whew, that looks like a mess. At the top level, eigenspaces() returns a
dictionary whose keys are the eigenvalues. So in this case we have
eigenvalues 3 and -1. Each eigenvalue has an array after it that forms
the basis of the eigenspace. In our example, there is 1 vector for
<d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>λ</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mn>3</m:mn></m:math></mathml></d4p_eqn_inline> and 2
vectors for <d4p_eqn_inline><mathml><m:math xmlns:m="http://www.w3.org/1998/Math/MathML" display="inline" overflow="scroll"><m:mi>λ</m:mi><m:mo class="MathClass-rel">=</m:mo><m:mo class="MathClass-bin">−</m:mo><m:mn>1</m:mn></m:math></mathml></d4p_eqn_inline>.
Finally, the vectors SAGE spits out may not be the nicest ones to work with. In
particular, we might want to scale the vectors to get rid of fractions.
                                                                          

                                                                          
</p></body></topic></topic>